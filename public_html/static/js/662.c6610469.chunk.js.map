{"version":3,"file":"static/js/662.c6610469.chunk.js","mappings":"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","sources":["components/assets/components/AlertDismissible.tsx","components/pages/resetPassword/ResetPasswordScreen.tsx"],"sourcesContent":["import { useState } from 'react';\r\nimport { IAlert } from '.';\r\n\r\nexport const ErrorAlertDismissible: React.FC<IAlert> = ({ data }) => {\r\n  const [show, setShow] = useState(true);\r\n\r\n  if (show) {\r\n    return (\r\n      <div className=\"danger\" onLoad={() => setShow(false)} style={{ width: 380, marginLeft: 56 }}>\r\n        <div>\r\n          <svg className=\"bi flex-shrink-0 me-2\" role=\"img\" aria-label=\"Danger:\" viewBox=\"0 0 16 16\" height={22} width={22}>\r\n            <path d=\"M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z\" />\r\n          </svg>{data.error && <span>{data.status} {data.statusCode} ERROR!</span>}\r\n        </div>\r\n        <p className=\"error-message\">\r\n          <span>{data.error}</span>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n  return <button onClick={() => setShow(true)} className=\"w-50 btn btn-outline-danger rounded-3\" style={{ marginLeft: 133 }}>Show Error</button>;\r\n};\r\n\r\n\r\nexport const SuccessAlertDismissible: React.FC<IAlert> = ({ data }) => {\r\n  const [show, setShow] = useState(true);\r\n\r\n  if (show) {\r\n    return (\r\n      <div className=\"success\" onLoad={() => setShow(false)} style={{ width: 380, marginLeft: 56 }}>\r\n        <div>\r\n          <svg className=\"bi flex-shrink-0 me-2\" role=\"img\" aria-label=\"Danger:\" viewBox=\"0 0 16 16\" height={22} width={22}>\r\n            <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z\" />\r\n          </svg>{data.status} SUCCESS!\r\n        </div>\r\n        <p className=\"success-message\">\r\n          <span>{data.message}</span><br />\r\n          {(data.data.username || data.data.email) && <span>Profiles: </span>}\r\n          {data.data.username && <span><br />{`Username: ${data.data.username}`}</span>}\r\n          {data.data.email && <span><br />{`Email: ${data.data.email}`}</span>}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n  return <button onClick={() => setShow(true)} className=\"w-50 btn btn-outline-success rounded-3\" style={{ marginLeft: 133 }}>Show Success</button>;\r\n\r\n};","import { useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport axios from \"axios\";\r\nimport { Link, useParams, useNavigate, useLocation } from \"react-router-dom\";\r\nimport \"./ResetPasswordScreen.css\";\r\nimport { ErrorAlertDismissible, SuccessAlertDismissible } from \"../../assets/components/AlertDismissible\";\r\nimport { IData } from \"..\";\r\n\r\nconst ResetPasswordScreen: React.FC = () => {\r\n    const { t } = useTranslation();\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n\r\n    const [passwordType, setPasswordType] = useState(\"password\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n\r\n    const [data, setData] = useState<IData[\"data\"]>([{\r\n        success: false,\r\n        status: \"INITIALLED\",\r\n        error: \"\",\r\n        data: {}\r\n    }]);\r\n    const [errorStatusCode, setErrorStatusCode] = useState<IData[\"statusCode\"]>(0);\r\n    const [errorData, setErrorData] = useState<IData[\"data\"]>([{\r\n        success: false,\r\n        status: \"INITIALLED\",\r\n        error: \"\",\r\n        data: {}\r\n    }]);\r\n\r\n    const { resetToken } = useParams();\r\n\r\n    async function resetPasswordHandler(e: any) {\r\n        e.preventDefault();\r\n\r\n        const config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        };\r\n\r\n        if (password !== confirmPassword) {\r\n            setPassword(\"\");\r\n            setConfirmPassword(\"\");\r\n            setTimeout(() => {\r\n                setErrorData([{\r\n                    status: \"FAILED\",\r\n                    success: false,\r\n                    error: \"\",\r\n                    data: {}\r\n                }]);\r\n            }, 5000);\r\n            return setErrorData([{\r\n                    status: \"FAILED\",\r\n                    success: false,\r\n                    error: \"Password do not match!\",\r\n                    data: {}\r\n                }]);\r\n        }\r\n\r\n        try {\r\n            const { data } = await axios.put(\r\n                `/api/auth/resetpassword/${resetToken}`,{ password:password }\r\n                ,\r\n                config);\r\n\r\n            setData([data]);\r\n\r\n        } catch (error: any) {\r\n            setErrorData([error.response.data]);\r\n            setErrorStatusCode(error.response.status);\r\n            setData([{\r\n                success: false,\r\n                status: \"INITIALLED\",\r\n                error: \"\",\r\n                data: {}\r\n            }]);\r\n            setTimeout(() => {\r\n                setErrorData([{\r\n                    status: \"\",\r\n                    success: false,\r\n                    error: \"\",\r\n                    data: {}\r\n                }]);\r\n                setErrorStatusCode(0);\r\n            }, 5000);\r\n        }\r\n    }\r\n\r\n    const togglePassword = async () => {\r\n        if(passwordType === \"password\")\r\n        {\r\n         setPasswordType(\"text\")\r\n         return;\r\n        }\r\n        setPasswordType(\"password\")\r\n    }\r\n\r\n    const navigateHandler = () => {\r\n        if (location.state?.from) {\r\n            navigate(location.state.from);\r\n        } else {\r\n            navigate(\"/\");\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"resetpassword-screen\">\r\n            <div className=\"modal position-static d-block pb-3 text-light\" tabIndex={-1} role=\"dialog\">\r\n                <div className=\"modal-dialog pt-4\" role=\"document\">\r\n                    <div className=\"modal-content bg-black bg-opacity-25 rounded-5 shadow border\">\r\n                        <div className=\"modal-header p-5 pb-0 border-bottom-0\"> \r\n                            <h2 className=\"resetpassword-screen__title fw-bold mb-3\">{t(\"mattix\")}Reset Password</h2>\r\n                            <button type=\"button\" className=\"btn-close btn-close-white\" data-bs-dismiss=\"modal\" aria-label=\"Close\" onClick={navigateHandler}>\r\n                            </button>\r\n                        </div>\r\n                            {data[0].success && <SuccessAlertDismissible data={data[0]}/>}\r\n                            {errorData[0].error && <ErrorAlertDismissible data={errorData[0]} statusCode= {errorStatusCode}/>}\r\n                        <div className=\"modal-body p-5 pt-0\">\r\n                            <form className=\"resetpassword-screen__from bg-transparent\" onSubmit={resetPasswordHandler}>\r\n\r\n                                <small className=\"resetpassword-screen__subtext text-light\">Please enter the new password to your given account.\r\n                                </small>\r\n\r\n                                <div className=\"form-floating mb-2 mt-1\">\r\n                                    <input \r\n                                    type={passwordType} \r\n                                    required \r\n                                    id=\"password\"\r\n                                    className=\"form-control rounded-4 bg-black text-light\" placeholder=\"Password\"\r\n                                    value={password} \r\n                                    onChange={(e) => setPassword(e.target.value)}\r\n                                    />\r\n                                    <label \r\n                                    htmlFor=\"password\">Password\r\n                                    </label>\r\n                                </div>\r\n\r\n                                <div className=\"form-floating mb-2\">\r\n                                    <input \r\n                                    type=\"password\"\r\n                                    required \r\n                                    id=\"confirmpassword\" \r\n                                    className=\"form-control rounded-4 bg-black text-light\" placeholder=\"Password\"\r\n                                    value={confirmPassword} \r\n                                    onChange={(e) => setConfirmPassword(e.target.value)}\r\n                                    />\r\n                                    <label htmlFor=\"confirmpassword\">Confirm Password</label>\r\n                                </div>\r\n\r\n                                <div className=\"text-center mb-3\"><button type=\"button\" className=\"btn btn-warning\" onClick={togglePassword}><span>Show Password</span></button></div>\r\n\r\n                                <div>\r\n                                    <button className=\"w-100 btn btn-lg btn-outline-info\" type=\"submit\">Reset Password</button>\r\n                                </div>\r\n\r\n                                <hr className=\"my-4\"/>\r\n\r\n                                <span className=\"resetpassword-screen__subtext\">Already set? Please login here. <Link to=\"/signin\" className=\"forgotpassword-screen__subtext__link\">Login</Link></span>\r\n\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default ResetPasswordScreen;"],"names":["ErrorAlertDismissible","data","useState","show","setShow","className","onLoad","style","width","marginLeft","role","viewBox","height","d","error","status","statusCode","onClick","SuccessAlertDismissible","message","username","email","t","useTranslation","navigate","useNavigate","location","useLocation","passwordType","setPasswordType","password","setPassword","confirmPassword","setConfirmPassword","success","setData","errorStatusCode","setErrorStatusCode","errorData","setErrorData","resetToken","useParams","e","preventDefault","config","headers","setTimeout","axios","response","togglePassword","tabIndex","type","state","from","onSubmit","required","id","placeholder","value","onChange","target","htmlFor","to"],"sourceRoot":""}